# -----------------------
#
# Run a full build-and-test from the git repo
# using a combination of conda and pip to install
# all optional dependencies.
#
# This is the 'full' test suite.
#
# -----------------------

name: Build and test

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: "0 0 * * *"

jobs:
  conda:
    name: ${{ matrix.name || format('Python {0} ({1})', matrix.python-version, matrix.os) }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - macOS
          - Ubuntu
          - Windows
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        include:
          - os: Ubuntu
            name: "Disable socket"
            python-version: "3"
            pytest-addopts: "--disable-socket -m 'not remote'"
    runs-on: ${{ matrix.os }}-latest

    # this is needed for conda environments to activate automatically
    defaults:
      run:
        shell: bash -el {0}

    steps:
    - name: Get source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Cache conda packages
      uses: actions/cache@v2
      env:
        # increment to reset cache
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-conda-${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}
        restore-keys: ${{ runner.os }}-conda-${{ matrix.python-version }}-

    - name: Configure conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: test
        channels: conda-forge
        python-version: ${{ matrix.python-version }}
        # this is needed for caching to work properly:
        use-only-tar-bz2: true

    - name: Conda info
      run: conda info --all

    - name: Install dependencies
      run: |
        python3 -c "
        import configparser;
        conf = configparser.ConfigParser();
        conf.read('setup.cfg');
        for opt in ('setup_requires', 'install_requires'):
            print(conf['options'][opt].strip())
        for extra in ('test',):
            print(conf['options.extras_require'][extra].strip())
        " | sort -u > requirements.txt
        conda install --quiet --yes --name test --file requirements.txt

    - name: Install GWOSC
      run: python -m pip install . --no-build-isolation -vv

    - name: Package list
      run: conda list --name test

    - name: Run test suite
      env:
        PYTEST_ADDOPTS: ${{ matrix.pytest-addopts }}
      run: python -m pytest -ra --color yes --cov gwosc --pyargs gwosc --cov-report=xml --junitxml=pytest.xml

    - name: Coverage report
      run: python -m coverage report --show-missing

    - name: Publish coverage to Codecov
      uses: codecov/codecov-action@v1.2.1
      with:
        files: coverage.xml
        flags: ${{ runner.os }},python${{ matrix.python-version }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: pytest-conda-${{ matrix.os }}-${{ matrix.python-version }}
        path: pytest.xml
